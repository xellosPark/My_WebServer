Passport 란?
Node.js에서 (Nest도 Node.js를 기반으로 만들어짐) Authenticate(인증)를 적용할 때에,
편하게 사용할 수 있는 미들웨어이다. 마치 출입국자의 출입국 심사 인증을 하는 "여권(passport)"의 역할과 같은데,
클라이언트가 서버에 권한을 요청을 할 자격이 있는지 인증(검증)할 때에 "passport" 미들웨어를 사용한다.
Nest는 이러한 토큰 인증(검증)에 있어서 passport의 사용을 권장하고 있다. 


1. passport와 bcrypt를 이용하여 사용자 인증
User module에 User Entity를 생성하고, User service에서 User database에 create / fetch 하는 메서드를 간단히 만들어 줍니다. UserService를 Authentication module에서 사용하길 원하기 때문에, UserService를 @Injectable() 데코레이터로 감싸주고, UserModule에서 UserService를 export해줍니다.

password는 가장 안전해야 하는 데이터입니다. 그래서 password는 hash 해야 합니다. hash를 하는 과정에서 필요한 값은 random string 인 salt 값이 필요합니다.

bcrypt
이 모든 과정을 bcrypt 라이브러리를 사용하면 쉽게 할 수 있습니다. bcrypt로 password에 salt값을 적용해 여러번 hash하여 복원하는 것을 어렵게 합니다. bcrypt는 cpu를 잡아먹는 작업이지만, thread pool의 추가적인 thread를 이용해 연산을 수행하므로 암호화하는 과정에서 다른 작업을 수행할 수 있습니다.
Authentication module을 생성하고, Authentication Service 에서 bcrypt를 이용해 요청으로 받은 비밀번호를 암호화하고 저장하겠습니다. 저장하기 위해서 user service가 필요하니 생성자에 전에 export한 user service를 불러와줍니다.


NestJs는 Passport 라이브러리를 사용하여 인증을 구현하는데, LocalStrategy는 인증 전략 중 하나로 로그인 폼에서 이름/ 패스워드를 이용해 인증하는 방식을 의미합니다.
LocalStrategy를 이용하는 경우 사용자를 검증하는 방식을 정의해야 하므로 validate() 함수 내부에 구현하였습니다.
NestJs에서는 LocalStrategy를 구현하기 위해 @nestjs/passport 모듈을 사용합니다. 이 모듈에서 AuthGuard 클래스를 사용하여 인증된 요청만 허용하는 Guard를 쉽게 생성할 수 있습니다.
@Guard(AuthGuard('local'))을 라우터의 미들웨어로 등록하여 쉽게 인증을 구현할 수 있습니다.
LocalStrategy를 구현하고 나서는 Authentication module에 등록해주면 되겠습니다.